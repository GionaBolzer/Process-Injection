/* XOR encrypt with 0x2a*/
using System;
class Program{
    static void Main(){

    byte key = 0x2a;

        byte[] buf = new byte[842] {0xdb,0xdb,0xd9,0x74,0x24,0xf4,
0xbb,0xdb,0xbd,0x7b,0x26,0x5e,0x29,0xc9,0xb1,0xcc,0x31,0x5e,
0x1a,0x03,0x5e,0x1a,0x83,0xc6,0x04,0xe2,0x2e,0x05,0x89,0x4e,
0x17,0x71,0xb4,0x5f,0x4e,0x0a,0x6c,0x94,0x2b,0xd8,0xa5,0xe5,
0x0d,0x2f,0x75,0x14,0x12,0xbb,0x85,0x1b,0xa5,0x5a,0x53,0xee,
0x48,0xf4,0x2b,0xc8,0x68,0xb8,0x61,0x34,0x3c,0x6c,0x29,0xfa,
0x2d,0xcf,0xfb,0xcc,0xaf,0x49,0x56,0xd1,0x8d,0xbf,0x0c,0xf5,
0xd5,0x72,0x39,0x76,0x55,0xc9,0x5e,0x79,0x7d,0x9f,0x06,0xd7,
0xa4,0x80,0xe8,0xa4,0x7c,0xc0,0x05,0x13,0xb3,0x35,0x87,0xcd,
0xb6,0x31,0x57,0x35,0x39,0xc4,0x0d,0xcf,0xf6,0x69,0xfa,0x2c,
0x65,0x6d,0xa2,0xc1,0x92,0xc6,0xd8,0x18,0xb0,0xcc,0x85,0x46,
0x3c,0x18,0xdc,0x4e,0xfe,0x53,0xd2,0x83,0xb4,0x6f,0xf8,0xd2,
0x95,0xae,0xcf,0x63,0x43,0xb0,0x80,0x66,0x74,0x85,0x4a,0x2e,
0xe9,0xaa,0x0e,0x62,0xd5,0xbd,0x78,0xe4,0xcc,0xe0,0xd4,0xce,
0x45,0x1e,0xe5,0xa4,0x4b,0x63,0x81,0xbc,0x72,0x55,0x5e,0xa6,
0x29,0xa1,0xcd,0xc1,0xe7,0x11,0x52,0x84,0x54,0x98,0x9c,0x61,
0xf7,0x17,0x62,0xbf,0x1e,0x2a,0xeb,0x9c,0x57,0x86,0x06,0xb5,
0x35,0xcd,0x8c,0x5e,0x7f,0xbc,0x8b,0xba,0xe4,0xb3,0xb7,0x76,
0x90,0x61,0xae,0xa8,0x38,0xef,0x9c,0x3d,0x31,0x76,0x26,0x0f,
0xf3,0xa5,0x29,0x2e,0xcc,0xf9,0x21,0xfd,0xbb,0x41,0x63,0xb9,
0xf2,0xdd,0xf1,0xda,0xe0,0x2b,0xb0,0xfe,0x23,0x17,0x57,0x32,
0x6a,0xb0,0x8f,0xde,0x9e,0xd4,0x56,0xfb,0x8e,0xc2,0x81,0x48,
0x84,0x86,0xd7,0xc0,0x5f,0x97,0xe7,0xa2,0x55,0x0b,0x11,0xf8,
0xee,0xa6,0xbe,0xd7,0x0b,0x5d,0x18,0x14,0x25,0xb5,0x5b,0x22,
0x36,0x6f,0xbb,0x90,0x08,0x62,0x10,0xa2,0xb9,0xd3,0xc8,0x77,
0x6d,0x8a,0xf2,0x69,0xf6,0x51,0xf2,0x3c,0xf6,0xf2,0x89,0xd8,
0x17,0x66,0x3c,0x06,0x8d,0x46,0xa4,0xd7,0x49,0x4b,0xb4,0xf6,
0xfd,0xd4,0x46,0x48,0x29,0x43,0x64,0xbe,0x98,0x4c,0x5f,0xb6,
0x1a,0x13,0x3a,0xe0,0x51,0x4d,0x7b,0xc1,0x2c,0x91,0x3f,0x2e,
0xb4,0x4e,0x8e,0xe3,0x56,0x2a,0x7c,0xfd,0x4e,0xd3,0xc1,0x03,
0x82,0x4c,0x61,0x37,0x32,0x5e,0xa3,0xb3,0xd7,0x03,0xde,0x14,
0x92,0x60,0x5d,0x4f,0x90,0xe2,0xdc,0x9d,0x8f,0xc3,0x52,0xe5,
0x3b,0x88,0x83,0x3b,0xb4,0xc8,0x37,0x4f,0x5e,0x71,0xee,0x2e,
0xf7,0x5d,0x94,0x73,0x10,0x30,0xce,0x85,0xd6,0xdf,0x1f,0xdb,
0x6c,0x21,0x5b,0xd2,0xe1,0xb5,0x1a,0x38,0x7b,0x4d,0x6a,0xcf,
0x7f,0x89,0xa1,0x09,0xf7,0xaf,0x66,0xc0,0x8a,0x07,0x01,0xb4,
0x0d,0x37,0x7c,0x9d,0x6f,0x83,0x66,0xdd,0x98,0x17,0x04,0xba,
0x2a,0xe3,0x78,0x86,0xd2,0xf0,0x7c,0x58,0x9f,0x2c,0x95,0xfd,
0x27,0x5d,0x97,0x91,0x19,0xc6,0xaa,0xf2,0x4d,0xe9,0xf7,0x67,
0x7f,0x20,0xbf,0x4a,0xce,0x09,0xe4,0x39,0x91,0xac,0x95,0x3a,
0x96,0x4f,0x4b,0x5b,0xa9,0x35,0x07,0xa3,0xef,0xf9,0xc7,0x58,
0x26,0x71,0x92,0x1a,0x5c,0xbe,0x39,0xa0,0x81,0x3a,0x7c,0x9a,
0xc5,0x16,0x77,0xab,0x1a,0x4a,0xaf,0x2e,0x74,0x88,0x8b,0xe1,
0x4e,0x23,0xad,0xff,0x80,0xc8,0x63,0x4f,0x71,0xe5,0x2f,0x93,
0x9e,0xc4,0x79,0x8e,0xa6,0x7a,0xf3,0xa6,0xf7,0x39,0xd4,0x0f,
0xe9,0x47,0x0b,0x57,0x72,0xb1,0xac,0x88,0x5d,0x93,0x26,0x56,
0xeb,0xb0,0x8c,0x80,0xce,0x19,0x4c,0x80,0x28,0x88,0x5a,0xf8,
0x88,0x54,0x66,0x1a,0xaa,0x02,0xc4,0xd5,0xd3,0x2f,0x4a,0xb6,
0x14,0x7c,0x81,0x58,0xb2,0xdb,0x3a,0xf5,0x2a,0x2f,0xa5,0x18,
0x93,0x2c,0x9d,0xf5,0xdb,0x94,0x73,0x8e,0x49,0x10,0x5b,0x68,
0x41,0x1a,0x86,0x4e,0xa6,0xb9,0x81,0xe6,0x12,0x72,0x0a,0xf8,
0xc8,0x4b,0x21,0x16,0xb2,0x6d,0x7e,0x1e,0x9d,0xe7,0xe1,0x5e,
0x15,0x84,0x63,0xdb,0x68,0xd0,0x5a,0x66,0x11,0xcd,0x34,0xb4,
0x54,0x20,0xe4,0x07,0x3b,0x35,0xd8,0xb0,0x52,0xe7,0xba,0xd1,
0x8d,0x7d,0x9a,0xb9,0x3e,0x9b,0x5a,0x77,0xaf,0xf2,0x5a,0x8a,
0x7f,0xdd,0x99,0x03,0x94,0x52,0x31,0xea,0x78,0xb3,0x1c,0x0f,
0xb9,0x98,0xe3,0x8a,0x3c,0x21,0xa8,0x4b,0x8c,0xc4,0x48,0x63,
0x3b,0x34,0x1d,0x22,0x3b,0xc5,0x84,0x6e,0x11,0x37,0xea,0xc0,
0x0e,0x19,0x0f,0xaf,0x39,0xb8,0xc9,0x03,0xc2,0x6f,0x63,0x36,
0x22,0xb2,0x55,0xec,0x6b,0x88,0x14,0x03,0xe9,0xcf,0xa9,0xf9,
0x9f,0x7d,0xb7,0xf8,0x42,0x03,0x16,0x98,0x59,0x71,0x92,0xf5,
0xc3,0x09,0x6f,0x1e,0x87,0x56,0x06,0xb2,0xb0,0x3d,0x9b,0xa8,
0x91,0xf2,0x4b,0x6d,0x78,0xb8,0x22,0xe2,0xb6,0x31,0x69,0x17,
0xdc,0x6d,0x01,0x9d,0xfc,0xc9,0xdb,0xe1,0x1a,0xfa,0x00,0x9c,
0x12,0xea,0xf2,0x6f,0x78,0x0a,0x00,0x0f,0x20,0x41,0xf8,0x64,
0xe9,0x7c,0x95,0x8b,0x46,0x69,0x88,0x3b,0x9f,0x98,0x14,0x54,
0x60,0xca,0x0e,0x6c,0x9b,0x88,0x1e,0x7e,0xdf,0xde,0xf8,0x48,
0x6c,0x4c,0xd6,0x4c,0xf5,0xb8,0x01,0xc5,0x15,0xb1,0x32,0x2c,
0xcb,0xe7,0x4f,0x63,0x60,0x05,0x2c,0xbe,0xfe,0x15,0xfb,0x85,
0x4b,0x81,0x59,0xc5,0xe0,0xff,0x45,0x39,0x0f,0x97,0xb7,0x17,
0xe5,0x6c,0xf5,0x8e,0x4a,0xa3,0xf8,0x70};

        // create array to put encodec
        byte[] encoded = new byte[buf.Length];

        Console.WriteLine($" XOR encryption with key 0x{key:x}");

        for (int i = 0; i < buf.Length; i++)
        {
            // add 2 to all data e then cap it to 255 with bitwise and with 0xFF
            encoded[i] = (byte)(buf[i] ^ key);
        }

        StringBuilder hex = new StringBuilder(encoded.Length * 2);
        int a = 0;
        foreach (byte b in encoded)
        {

            // put string wiht payload in correct format
            hex.AppendFormat("0x{0:x2}, ", b);
            if ((a % 12 == 0) && !(a == 0))
            { 
                hex.Append("\n");
            }
            a++;
        }

        Console.WriteLine($"byte[] buf = new byte[{buf.Length}] {{\n{hex.ToString()}}};");
    }
}